<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Notes on COMP52315 – Performance Engineering</title><link>https://teaching.wence.uk/comp52315/notes/</link><description>Recent content in Notes on COMP52315 – Performance Engineering</description><generator>Hugo -- gohugo.io</generator><language>en-GB</language><atom:link href="https://teaching.wence.uk/comp52315/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>https://teaching.wence.uk/comp52315/notes/introduction/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp52315/notes/introduction/</guid><description>Resources in stored program computers # To understand the performance of a code, we need to have an understanding of what hardware resources it uses, and what resources the hardware provides.
All modern general purpose hardware uses a von Neumann architecture. That is, there is a memory which stores both the program code to be executed and the data for the program. This is attached to a processor (CPU) which contains execution units for executing individual instructions in the program code along with further parts of logical control and load/store of data.</description></item><item><title>The memory hierarchy</title><link>https://teaching.wence.uk/comp52315/notes/memory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp52315/notes/memory/</guid><description>An overview of memory hierarchies # Reduction benchmark # In exercise 1 you looked at the performance of a vectorised and non-vectorised version of a very simple loop computing the sum of an array of floating point numbers.
In doing so, you produced a plot of the performance (in terms of floating point throughput) as a function of array size. You should have observed something similar to that shown here.</description></item></channel></rss>