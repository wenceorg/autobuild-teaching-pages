<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Introduction on COMP4187 – Parallel Scientific Computing II</title><link>https://teaching.wence.uk/comp4187/</link><description>Recent content in Introduction on COMP4187 – Parallel Scientific Computing II</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://teaching.wence.uk/comp4187/index.xml" rel="self" type="application/rss+xml"/><item><title>Coarse Grid Operator</title><link>https://teaching.wence.uk/comp4187/exercises/coarse-grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/coarse-grid/</guid><description>Constructing a coarse grid operator # We consider the discrete Poisson system with Dirichlet boundary conditions and 7 grid points, $$\frac{-u_{i-1} + 2 u_i - u_{i+1}}{h^2} = f_i, i=1\dots 5$$ $$u_0 = u_6 &amp;amp; = &amp;amp; 1, &amp;amp; \text{(inhomogeneous)}$$ where the mesh size is $h:=\frac{1}{6}$.
Formulate the system of equations in matrix form, i.e. $A_h u = b_h$. Take care with the boundary conditions. Define a linear mapping $R: \mathbb{R}^5 \rightarrow \mathbb{R}^2$ according to the full weighting scheme.</description></item><item><title>Finite Differences</title><link>https://teaching.wence.uk/comp4187/exercises/finite-differences/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/finite-differences/</guid><description>Finite Differences # Consider the one-dimensional Poisson equation with homogeneous Dirichlet conditions $$-\frac{d^2 u}{d x^2}=f(x),~~~x\in(0,1)$$ with Dirichlet boundary conditions $$u(0)=u(1) = 0.$$
Discretise the Poisson equation by finite differences using an equidistant mesh size $h=1/N$ and $N+1$ grid points. Write the finite difference approximation from 1. in matrix-vector form $Au=b$. Therefore, define the entries of the matrix $A\in\mathbb{R}^{N+1\times N+1}$. Write the finite difference approximation as $Au=b$, where $A\in\mathbb{R}^{N-1\times N-1}$ and $b\in\mathbb{R}^{N-1}$, by substituting the values for $u(0)$ and $u(1)$.</description></item><item><title>Two-Grid Iteration</title><link>https://teaching.wence.uk/comp4187/exercises/two-grid/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/two-grid/</guid><description>Fourier Analysis for Two-Grid Iteration # You can find the exercise in the following ipython notebook: ipython notebook</description></item><item><title>Acknowledgements</title><link>https://teaching.wence.uk/comp4187/acknowledgements/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/acknowledgements/</guid><description>Acknowledgements # Most of the course materials have been provided by Lawrence Mitchell.
Some of the material in the time integration notebooks is adapted from Jed Brown&amp;rsquo;s numerical computation class (https://github.com/cucs-numcomp/numcomp-class) under BSD 2-clause license.</description></item><item><title/><link>https://teaching.wence.uk/comp4187/exercises/norms/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/exercises/norms/</guid><description>If you find yourself confused by the norms used in the lecture work through this notebook on norms:
ipython notebook</description></item><item><title/><link>https://teaching.wence.uk/comp4187/notes/overview/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/notes/overview/</guid><description>The course will be taught over both Term 1 and 2, and assessed by a single piece of coursework due in Term 3.
There are two sections to the course:
Numerical Methods II (this runs in Term 1), taught by Anne Reinarz Parallel Computing II (this runs in Term 2), taught by Lawrence Mitchell Lecture slots are at 9am on Wednesday mornings. These will be run over Zoom Click for more options</description></item><item><title/><link>https://teaching.wence.uk/comp4187/setup/coursework/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/setup/coursework/</guid><description>The course is assessed by a single piece of coursework (due in Term 3: see the module handbook for dates). It will be available in Term 2.</description></item><item><title/><link>https://teaching.wence.uk/comp4187/setup/jupyter/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/setup/jupyter/</guid><description>Running the notebooks # To install the necessary software, I recommend doing so in a Python virtual environment. We need Python3. Doing something like:
$ python3 -m venv sci-comp $ . sci-comp/bin/activate # Or other script if you use a different shell $ pip install numpy scipy pandas ipython jupyter $ cd path/to/repo/material $ jupyter notebook Will pop up a browser window.
If this results in an AssertionError (see https://github.</description></item><item><title>Lecture 1: FD</title><link>https://teaching.wence.uk/comp4187/lectures/lecture1/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/lecture1/</guid><description>The lecture will take place over zoom. A calender invite is available on duo. The zoom invite can also be found at info).
Before the lecture it would be good if you can download the ipython notebook and run it. You can see jupyter for instructions on how to run the notebook.
Alternatively, you can run the notebook online without installing python.
finite-differences After the lecture a video recording has been placed on duo.</description></item><item><title>Lecture 2: FD</title><link>https://teaching.wence.uk/comp4187/lectures/lecture2/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/lecture2/</guid><description>For this lecture we continued with ipython notebook.
The notebook is also available online without installing python.
finite-differences After the lecture a video recording has been placed on duo. The video is now available at: video</description></item><item><title>Lecture 3: FD</title><link>https://teaching.wence.uk/comp4187/lectures/lecture3/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/lecture3/</guid><description>We will be moving on to the next notebook during the next lecture. Before the lecture it would be good if you can download the next ipython notebook and run it. You can see jupyter for instructions on how to run the notebook.
Alternatively, you can run the notebook online without installing python.
finite-differences The video is now available at: video
The content of the whiteboard can be found below.</description></item><item><title>Lecture 4: Smoothers</title><link>https://teaching.wence.uk/comp4187/lectures/lecture4/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/lecture4/</guid><description>In this lecture we will finish covering efficient matrix storage from: ipython notebook.
Alternatively, you can run the notebook online without installing python.
finite-differences After that we will start discussing efficient solvers for linear systems. This lecture will cover smoothers: ipython notebook.
Alternatively, you can run the notebook online without installing python.
smoothers-intro After the lecture have a look at the corresponding exercise.
The video is now available at: video</description></item><item><title>Lecture 5: Smoothers</title><link>https://teaching.wence.uk/comp4187/lectures/lecture5/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/lecture5/</guid><description>This lecture will cover smoothers: ipython notebook.
Alternatively, you can run the notebook online without installing python.
smoothers-intro We also started on the multigrid method: ipython notebook
The video is now available at: video
The content of the whiteboard can be found below. It is also all contained in the ipython notebook itself.</description></item><item><title>Lecture 6: Multigrid</title><link>https://teaching.wence.uk/comp4187/lectures/lecture6/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/lecture6/</guid><description>We continue with the multigrid method: ipython notebook
The video is now available at: video
The content of the whiteboard can be found below. It is also all contained in the ipython notebook itself.</description></item><item><title>Lecture 7: Multigrid</title><link>https://teaching.wence.uk/comp4187/lectures/lecture7/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/lecture7/</guid><description>We continue with the multigrid method: ipython notebook
The proof for Poisson can be found in:
Dietrich Braess and Wolfgang Hackbusch,A New Convergence Proof for the Multi-grid Method including the V-Cycle, SIAM J. Numer. Anal.,20, 967–975, 1983 At this point you may want to have a look at the two exercises:
On two grid: exercise. If you are unused to Fourier-analysis you will find this exercise quite challenging.</description></item><item><title>Lecture 8: Time-stepping</title><link>https://teaching.wence.uk/comp4187/lectures/lecture8/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/comp4187/lectures/lecture8/</guid><description>We finish the discussion of multigrid method: ipython notebook
We will begin looking at time-stepping methods (for now in an ODE setting): ipython notebook</description></item></channel></rss>