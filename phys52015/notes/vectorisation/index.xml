<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vectorisation on PHYS52015 – Introduction to HPC</title><link>https://teaching.wence.uk/phys52015/notes/vectorisation/</link><description>Recent content in Vectorisation on PHYS52015 – Introduction to HPC</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://teaching.wence.uk/phys52015/notes/vectorisation/index.xml" rel="self" type="application/rss+xml"/><item><title>Compiler autovectorisation</title><link>https://teaching.wence.uk/phys52015/notes/vectorisation/compiler/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://teaching.wence.uk/phys52015/notes/vectorisation/compiler/</guid><description>Obtained vectorised code # If we write code that we would like to be vectorised, we have multiple different options available to us on how to obtain it. We&amp;rsquo;ll first list some approaches, briefly detail their strengths and weaknesses, and then go into more detail on the approach that we&amp;rsquo;ll be using in this course.
First, some general advice. It is tempting to think of vectorisation as an optimisation that we can apply locally to our code.</description></item></channel></rss>